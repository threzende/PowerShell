Confirme o que você está testando

# Veja para qual IP "serverX1" resolve
Resolve-DnsName serverX1

# Liste os IPs locais para ver se esse IP é do próprio host
Get-NetIPAddress -AddressFamily IPv4 | Select IPAddress,InterfaceAlias


Se serverX1 não resolve para um IP local, você está testando a rede (NAT/LB/etc.). Para testar o listen local, use 127.0.0.1 ou o IP local.

Veja se há algo escutando na 22
----
# Em Windows moderno:
Get-NetTCPConnection -State Listen -LocalPort 22
----
# Ou o clássico:
netstat -ano | findstr ":22"


Se não aparecer nada, não há serviço escutando.

Cheque/instale o OpenSSH Server
-----
# Ver se está instalado
Get-WindowsCapability -Online -Name OpenSSH.Server*

# Instalar (se necessário)
Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0

# Iniciar e configurar para iniciar com o sistema
Start-Service sshd
Set-Service -Name sshd -StartupType Automatic

# (Opcional) Iniciar o agente se precisar
# Start-Service ssh-agent
-------

Habilite a regra no Firewall do Windows
-------
# Ver regras relacionadas
Get-NetFirewallRule -DisplayName "*OpenSSH*" | Format-Table -Auto

# Criar uma regra caso não exista
New-NetFirewallRule -Name OpenSSH-Server-In-TCP -DisplayName "OpenSSH Server (sshd)" `
  -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22
-----

Re-testes
------
# Teste local (loopback) – verifica se há listener
Test-NetConnection -ComputerName 127.0.0.1 -Port 22 -InformationLevel Detailed

# Teste pelo IP da máquina (pega firewall também)
$ip = (Get-NetIPAddress -AddressFamily IPv4 | Where-Object {$_.IPAddress -notlike '169.*'} | Select-Object -First 1).IPAddress
Test-NetConnection -ComputerName $ip -Port 22 -InformationLevel Detailed
------

Se local OK e remoto ainda falhar, aí o problema tende a ser rede (ACL, NACL, Security Group, FW perimetral, roteamento, etc.). Peça para testarem de outra máquina:
------
Test-NetConnection -ComputerName serverX1 -Port 22 -InformationLevel Detailed
------
Script PowerShell “Tudo-em-um”

Copie e execute no serverX1 (como Admin). Ele checa DNS, listener, instala e sobe o OpenSSH se faltar, ajusta firewall e faz testes locais/remotos:
---------
# === Diagnóstico e correção da porta 22 (OpenSSH) no Windows Server 2019 ===
$ErrorActionPreference = "SilentlyContinue"

Write-Host "===> 1) Resolução de nome" -ForegroundColor Cyan
try {
  $dns = Resolve-DnsName serverX1 -ErrorAction Stop
  $dnsIPs = $dns | Where-Object {$_.Type -eq 'A'} | Select-Object -ExpandProperty IPAddress
  Write-Host ("serverX1 -> {0}" -f ($dnsIPs -join ", "))
} catch {
  Write-Host "Não foi possível resolver 'serverX1'." -ForegroundColor Yellow
  $dnsIPs = @()
}

Write-Host "`n===> 2) IPs locais" -ForegroundColor Cyan
$localIPs = Get-NetIPAddress -AddressFamily IPv4 | Where-Object {$_.IPAddress -notlike '169.*'} | Select-Object -ExpandProperty IPAddress
Write-Host ("Locais: {0}" -f ($localIPs -join ", "))

Write-Host "`n===> 3) Há algo escutando na porta 22?" -ForegroundColor Cyan
$listen = Get-NetTCPConnection -State Listen -LocalPort 22
if ($listen) {
  Write-Host "Já existe listener na 22." -ForegroundColor Green
  $pids = $listen | Select-Object -ExpandProperty OwningProcess -Unique
  foreach($pid in $pids){
    try {
      $p = Get-Process -Id $pid
      Write-Host ("Processo: {0} (PID {1})" -f $p.ProcessName, $p.Id)
    } catch {}
  }
} else {
  Write-Host "Nenhum listener encontrado na 22." -ForegroundColor Yellow
}

Write-Host "`n===> 4) Status do OpenSSH Server" -ForegroundColor Cyan
$cap = Get-WindowsCapability -Online -Name OpenSSH.Server*
$sshdInstalled = $cap.State -eq 'Installed'
Write-Host ("OpenSSH Server instalado? {0}" -f $sshdInstalled)

if (-not $sshdInstalled) {
  Write-Host "Instalando OpenSSH Server..." -ForegroundColor Yellow
  Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0 | Out-Null
}

# Garantir serviço em execução
$svc = Get-Service -Name sshd -ErrorAction SilentlyContinue
if ($svc) {
  if ($svc.Status -ne 'Running') {
    Write-Host "Iniciando serviço sshd..." -ForegroundColor Yellow
    Start-Service sshd
  }
  Set-Service -Name sshd -StartupType Automatic
} else {
  Write-Host "Serviço sshd não encontrado mesmo após tentativa de instalação." -ForegroundColor Red
}

Write-Host "`n===> 5) Firewall do Windows" -ForegroundColor Cyan
$fwRule = Get-NetFirewallRule -DisplayName "OpenSSH Server (sshd)" -ErrorAction SilentlyContinue
if (-not $fwRule) {
  Write-Host "Criando regra de firewall para porta 22..." -ForegroundColor Yellow
  New-NetFirewallRule -Name OpenSSH-Server-In-TCP -DisplayName "OpenSSH Server (sshd)" `
    -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22 | Out-Null
} else {
  Write-Host "Regra de firewall encontrada." -ForegroundColor Green
}

Start-Sleep -Seconds 2

Write-Host "`n===> 6) Testes de conectividade local" -ForegroundColor Cyan
tnc 127.0.0.1 -Port 22 -InformationLevel Detailed
foreach ($lip in $localIPs) {
  tnc $lip -Port 22 -InformationLevel Detailed
}

if ($dnsIPs.Count -gt 0) {
  Write-Host "`n===> 7) Teste usando o nome 'serverX1' (pode sair pela rede)" -ForegroundColor Cyan
  tnc serverX1 -Port 22 -InformationLevel Detailed
}

Write-Host "`nConcluído."
-------

Interpretação rápida dos resultados

Sem listener na etapa 3 → instale/inicie o sshd (etapa 4).

Listener OK, teste 127.0.0.1 OK, mas teste remoto falha → rede/perímetro/ACL. Envie para o time de network o IP do servidor, hora do teste e o result code/SYN do TNC remoto.

Nome ‘serverX1’ resolve para IP diferente do host → você estava testando outro destino (LB, VIP, etc.). Teste pelo IP correto.




#################################################################

atualiza offce VL 2021 funciounou top


(Get-Item "C:\Program Files\Microsoft Office\root\Office16\WINWORD.EXE").VersionInfo.FileVersion




# (2.1) Fixar canal do LTSC 2021 (PerpetualVL2021)
reg add "HKLM\SOFTWARE\Microsoft\Office\ClickToRun\Configuration" `
 /v UpdateChannel /t REG_SZ `
 /d https://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60 /f

# (2.2) (opcional) Fixar exatamente a versão corrigida
reg add "HKLM\SOFTWARE\Policies\Microsoft\Office\16.0\Common\OfficeUpdate" `
 /v TargetVersion /t REG_SZ /d 16.0.14334.20244 /f

# (2.3) Fechar apps do Office e forçar update
$cli="$Env:ProgramFiles\Common Files\Microsoft Shared\ClickToRun\OfficeC2RClient.exe"
& $cli /update user updatetoversion=16.0.14334.20244 forceappshutdown=true








# 1) Versão do WinWord (ajusta para x86 se precisar)
$exe1="C:\Program Files\Microsoft Office\root\Office16\WINWORD.EXE"
$exe2="C:\Program Files (x86)\Microsoft Office\root\Office16\WINWORD.EXE"
$exe = if (Test-Path $exe1) { $exe1 } elseif (Test-Path $exe2) { $exe2 } else { $null }
"WINWORD path: $exe"
if ($exe) { (Get-Item $exe).VersionInfo.FileVersion } else { "WINWORD.EXE não encontrado" }

# 2) Configuração do Click-to-Run (canal, update path etc.)
reg query "HKLM\SOFTWARE\Microsoft\Office\ClickToRun\Configuration" /v UpdateChannel
reg query "HKLM\SOFTWARE\Microsoft\Office\ClickToRun\Configuration" /v UpdatePath
reg query "HKLM\SOFTWARE\Microsoft\Office\ClickToRun\Configuration" /v ProductReleaseIds

# 3) Políticas que podem travar a versão alvo
reg query "HKLM\SOFTWARE\Policies\Microsoft\Office\16.0\Common\OfficeUpdate" /v TargetVersion
reg query "HKLM\SOFTWARE\Policies\Microsoft\Office\16.0\Common\OfficeUpdate" /v UpdateChannel


















##################################################################
/---------- TNC
Test-NetConnection -ComputerName 192.168.99.21 -Port 5701 -SourceAddress 192.168.99.<seu_ip>



ping 192.168.99.21 -n 1
Get-NetNeighbor -IPAddress 192.168.99.21 -AddressFamily IPv4
# ou: arp -a | findstr 192.168.99.21



no servidor 21 que o APP0092V

ping 192.168.99.20 -n 1
Get-NetNeighbor -IPAddress 192.168.99.20 -AddressFamily IPv4



(Get-NetIPConfiguration | Where-Object { $_.IPv4Address.IPAddress -like "192.168.99.*" }).InterfaceIndex





Server 20 (IF = 15)
route -p add 192.168.99.21 mask 255.255.255.255 0.0.0.0 IF 15

Server 21 (IF = 12)
route -p add 192.168.99.20 mask 255.255.255.255 0.0.0.0 IF 12

Teste rápido

No 20:

Test-NetConnection 192.168.99.21 -Port 5701 -SourceAddress 192.168.99.20 -InformationLevel Detailed


No 21:

Test-NetConnection 192.168.99.20 -Port 5701 -SourceAddress 192.168.99.21 -InformationLevel Detailed

Conferir / Remover (se precisar)
route print 192.168.99.21
route print 192.168.99.20

route delete 192.168.99.21
route delete 192.168.99.20




Test-NetConnection 192.168.99.20 -Port 5701 -SourceAddress 192.168.99.21 -InformationLevel Detailed
Get-NetNeighbor -IPAddress 192.168.99.20 -AddressFamily IPv4





ping -S 192.168.99.21 192.168.99.20 -n 1
Get-NetNeighbor -IPAddress 192.168.99.20 -AddressFamily IPv4









##############################################################
/-------- Office Skype Atualização

msiexec /p "C:\Temp\kbs\lync-x-none_...\lync-x-none.msp" /qb-! /L*v "C:\Temp\kbs\lync_patch.log"


<
$paths = @(
  'C:\Program Files\Microsoft Office\Office16\lync.exe',
  'C:\Program Files (x86)\Microsoft Office\Office16\lync.exe'
)
foreach ($p in $paths) { if (Test-Path $p) { "$p -> " + (Get-Item $p).VersionInfo.FileVersion } }
>


<
# Ver se o KB5002181 (Office/Skype MSI) está instalado
$kb = 'KB5002181'

$patches = Get-ChildItem 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Installer\UserData\S-1-5-18\Products' -Recurse -ErrorAction SilentlyContinue |
  Where-Object { $_.PSPath -like '*\Patches\*' } |
  ForEach-Object {
    try { Get-ItemProperty -Path $_.PSPath -Name DisplayName, MoreInfoURL, Installed -ErrorAction Stop } catch {}
  }

$patches | Where-Object { $_.DisplayName -match $kb } |
  Select-Object DisplayName, Installed, MoreInfoURL, PSPath
>


<
taskkill /IM lync.exe /F
>


<
msiexec /p "C:\Temp\kbs\lync-x-none_...\lync-x-none.msp" REINSTALL=ALL REINSTALLMODE=omus /qb-! /L*v "C:\Temp\kbs\lync_force.log"
>


##############################################################













Hive:
HKEY_LOCAL_MACHINE

Key:

SOFTWARE\WOW6432Node\Microsoft\EdgeUpdate\Clients\{56EB18F8-B008-4CBD-B6D2-8C97FE7E9062}


Value name:
pv

Data type:
Version

Operator:
Greater than or equal to

Value:
139.0.3405.111



------------------------------------------------------------------

msiexec /i "microsoft-edge-138-0-3351-77.msi" /qn /norestart REBOOT=ReallySuppress



msiexec /x {36DD0BCA-DB49-3B7A-9A22-F0A3FDFA86B4} /qn /norestart REBOOT=ReallySuppress