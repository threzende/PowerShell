# Ping_Log_SAP_Monitor.ps1
# -------------------------------------------------------
# powershell.exe -ExecutionPolicy Bypass -File "C:\temp\ping_log\Ping_Log_SAP_Monitor.ps1"
# Agora usa ping.exe diretamente para registrar mesmo falhas contínuas a cada 1 segundo
# -------------------------------------------------------

$logDir = "C:\temp\ping_log"
$ip = "142.250.219.132"

if (-Not (Test-Path $logDir)) {
    New-Item -Path $logDir -ItemType Directory | Out-Null
}

Write-Host "Monitoramento iniciado. Pressione Ctrl+C para parar."

# Armazena o dia atual
$dataAtual = Get-Date -Format "yyyy-MM-dd"

# Caminhos baseados na data
function Atualizar-Caminhos {
    param([string]$dataRef)

    return @{
        logOK = Join-Path $logDir "Ping_Log_SAP_Monitor_OK_$dataRef.txt"
        logDrop = Join-Path $logDir "Ping_Log_SAP_Monitor_DROP_$dataRef.txt"
        logUnicoTxt = Join-Path $logDir "Ping_Log_SAP_Monitor_UNICO_$dataRef.txt"
        logHtml = Join-Path $logDir "ping_log_unico_$dataRef.html"
    }
}

# Função para iniciar novo HTML
function Iniciar-HTML {
    param([string]$arquivo, [string]$dataRef)

    @"
<html>
<head>
    <meta charset='UTF-8'>
    <title>Ping Log SAP Monitor - $dataRef</title>
    <style>
        body { font-family: Consolas, monospace; background-color: #f4f4f4; padding: 20px; }
        .ok { color: green; }
        .erro { color: red; }
    </style>
</head>
<body>
    <h2>Ping Log SAP Monitor - $dataRef</h2>
    <pre>
"@ | Out-File $arquivo -Encoding UTF8 -Force
}

# Inicializa caminhos do primeiro dia
$caminhos = Atualizar-Caminhos -dataRef $dataAtual
Iniciar-HTML -arquivo $caminhos.logHtml -dataRef $dataAtual

# Loop contínuo
while ($true) {
    $dataHoraLog = Get-Date -Format "dd/MM/yyyy - HH:mm:ss"
    $dataNova = Get-Date -Format "yyyy-MM-dd"

    if ($dataNova -ne $dataAtual) {
        "</pre></body></html>" | Out-File $caminhos.logHtml -Append -Encoding UTF8
        $dataAtual = $dataNova
        $caminhos = Atualizar-Caminhos -dataRef $dataAtual
        Iniciar-HTML -arquivo $caminhos.logHtml -dataRef $dataAtual
    }

    # Usa ping.exe diretamente
    $resultado = ping.exe -n 1 -w 1000 $ip 2>&1
    $resultadoTexto = $resultado -join "`n"

    if ($resultadoTexto -match "Resposta de .*tempo[=<]([0-9]+)ms") {
        $tempo = [int]$matches[1]
        $mensagem = "$dataHoraLog Resposta de $ip: tempo=$tempo ms"

        if ($tempo -gt 400) {
            $mensagemErro = "$dataHoraLog ERRO: Resposta acima de 400ms ($tempo ms)"
            $mensagemErro | Out-File $caminhos.logDrop -Encoding UTF8 -Append
            $mensagemErro | Out-File $caminhos.logUnicoTxt -Encoding UTF8 -Append
            "<span class='erro'>$mensagemErro</span>" | Out-File $caminhos.logHtml -Append -Encoding UTF8
        } else {
            $mensagem | Out-File $caminhos.logOK -Encoding UTF8 -Append
            $mensagem | Out-File $caminhos.logUnicoTxt -Encoding UTF8 -Append
            "<span class='ok'>$mensagem</span>" | Out-File $caminhos.logHtml -Append -Encoding UTF8
        }
    }
    else {
        $mensagemErro = "$dataHoraLog ERRO: Sem resposta do IP $ip"
        $mensagemErro | Out-File $caminhos.logDrop -Encoding UTF8 -Append
        $mensagemErro | Out-File $caminhos.logUnicoTxt -Encoding UTF8 -Append
        "<span class='erro'>$mensagemErro</span>" | Out-File $caminhos.logHtml -Append -Encoding UTF8
    }

    Start-Sleep -Seconds 1
}
