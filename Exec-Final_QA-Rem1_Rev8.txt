$computerName = $env:COMPUTERNAME

$outputFile = "C:\Temp\QA_$computerName.html"

$osInfo = Get-CimInstance -ClassName Win32_OperatingSystem
$osVersion = "$($osInfo.Caption) $($osInfo.Version) $($osInfo.BuildNumber)"

$sccmShortcutPath = "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Microsoft Configuration Manager\Configuration Manager\Software Center.lnk"
$sccmInstalled = if (Test-Path $sccmShortcutPath) { "Yes" } else { "No" }

$registryPath = "HKLM:\Software\Microsoft\Windows\CurrentVersion\Group Policy\State\Machine"
$ou = if (Test-Path $registryPath) {
    Get-ItemProperty -Path $registryPath | Select-Object -ExpandProperty Distinguished-Name
} else {
    "N/A"
}

$volumes = Get-Volume | Where-Object { $_.DriveLetter -ne $null } | Select-Object DriveLetter, FileSystemLabel, Size

$programFilters = @(
    "Carbon Black",
    "Nessus",
    "NetWorker",
    "SolarWinds",
    "Trellix Endpoint Security"
    "Fireeye"
)

$installedPrograms = @()
$uninstallKeys = @(
    "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall",
    "HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall"
)

foreach ($key in $uninstallKeys) {
    Get-ChildItem -Path $key | ForEach-Object {
        $displayName = $_.GetValue("DisplayName")
        $displayVersion = $_.GetValue("DisplayVersion")
        $installDate = $_.GetValue("InstallDate")

        if ($displayName -and ($programFilters | Where-Object { $displayName -like "*$_*" })) {
            $installedPrograms += [PSCustomObject]@{
                Name = $displayName
                Version = $displayVersion
                InstallDate = if ($installDate) {
                    [DateTime]::ParseExact($installDate, "yyyyMMdd", $null).ToShortDateString()
                } else {
                    "N/A"
                }
            }
        }
    }
}

$networkInfo = Get-NetIPConfiguration | ForEach-Object {
    [PSCustomObject]@{
        IPv4Address = $_.IPv4Address.IPAddress
        SubnetMask = if ($_.IPv4Address.PrefixLength) {
            $prefix = $_.IPv4Address.PrefixLength
            ([IPAddress](([math]::Pow(2, 32) - [math]::Pow(2, (32 - $prefix))) -as [long])).ToString()
        } else {
            "N/A"
        }
        DNSServers = if ($_.DNSServer.ServerAddresses) {
            $_.DNSServer.ServerAddresses -join " | "
        } else {
            "N/A"
        }
    }
}

$tasks = Get-ScheduledTask | Where-Object { $_.TaskName -like "*reboot*" }

$html = @"
<!DOCTYPE html>
<html>
<head>
    <title>System Information</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            color: #333;
            margin: 0;
            padding: 0;
            line-height: 1.2;
        }
        h1 {
            font-size: 16px;
            color: #0056b3;
            margin-bottom: 8px;
        }
        table {
            border-collapse: collapse;
            width: 100%;
            margin-bottom: 15px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 6px;
            text-align: left;
            font-size: 12px;
        }
        th {
            background-color: #f4f4f4;
            font-weight: bold;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        tr:hover {
            background-color: #f1f1f1;
        }
    </style>
</head>
<body>
    <h1>System Information</h1>
    <table>
        <thead>
            <tr>
                <th>Server Name</th>
                <th>OS Version</th>
                <th>SCCM Installed</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>$computerName</td>
                <td>$osVersion</td>
                <td>$sccmInstalled</td>
            </tr>
        </tbody>
    </table>
    <h1>Organizational Unit (OU)</h1>
    <table>
        <thead>
            <tr>
                <th>OU</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>$ou</td>
            </tr>
        </tbody>
    </table>
    <h1>Disk and Volume Information</h1>
    <table>
        <thead>
            <tr>
                <th>Drive Letter</th>
                <th>Label</th>
                <th>Total Size (GB)</th>
            </tr>
        </thead>
        <tbody>
"@

foreach ($volume in $volumes) {
    $totalSizeGB = [math]::Round($volume.Size / 1GB, 2)
    $html += "<tr>
                <td>$($volume.DriveLetter)</td>
                <td>$($volume.FileSystemLabel)</td>
                <td>$totalSizeGB</td>
              </tr>"
}

$html += @"
        </tbody>
    </table>
    <h1>Installed Programs</h1>
    <table>
        <thead>
            <tr>
                <th>Program Name</th>
                <th>Version</th>
                <th>Install Date</th>
            </tr>
        </thead>
        <tbody>
"@

foreach ($program in $installedPrograms) {
    $html += "<tr>
                <td>$($program.Name)</td>
                <td>$($program.Version)</td>
                <td>$($program.InstallDate)</td>
              </tr>"
}

$html += @"
        </tbody>
    </table>
    <h1>Network Information</h1>
    <table>
        <thead>
            <tr>
                <th>IP Address</th>
                <th>Subnet Mask</th>
                <th>DNS Servers</th>
            </tr>
        </thead>
        <tbody>
"@

foreach ($net in $networkInfo) {
    $html += "<tr>
                <td>$($net.IPv4Address)</td>
                <td>$($net.SubnetMask)</td>
                <td>$($net.DNSServers)</td>
              </tr>"
}

$html += @"
        </tbody>
    </table>
    <h1>Scheduled Tasks Related to Reboot</h1>
    <table>
        <thead>
            <tr>
                <th>Task Name</th>
                <th>Days</th>
                <th>Start Time</th>
            </tr>
        </thead>
        <tbody>
"@

if ($tasks.Count -gt 0) {
    foreach ($task in $tasks) {
        $triggers = $task.Triggers
        $daysOfWeek = @()
        $formattedTime = ""

        foreach ($trigger in $triggers) {
            if ($trigger.DaysOfWeek) {
                $daysOfWeek = $trigger.DaysOfWeek | ForEach-Object {
                    switch ($_){
                        1 {"Sunday"}
                        2 {"Monday"}
                        4 {"Tuesday"}
                        8 {"Wednesday"}
                        16 {"Thursday"}
                        32 {"Friday"}
                        64 {"Saturday"}
                    }
                }
            }

            if ($trigger.StartBoundary) {
                $startTime = Get-Date -Date $trigger.StartBoundary
                $formattedTime = $startTime.ToString("hh:mm tt", [System.Globalization.CultureInfo]::InvariantCulture)
            } else {
                $formattedTime = "No start time defined"
            }
        }

        $taskName = $task.TaskName
        $html += "<tr>
                    <td>$taskName</td>
                    <td>$($daysOfWeek -join ", ")</td>
                    <td>$formattedTime</td>
                  </tr>"
    }
} else {
    $html += "<tr>
                <td colspan='3'>No tasks found in Task Scheduler Library containing 'reboot'.</td>
              </tr>"
}

$html += @"
        </tbody>
    </table>
</body>
</html>
"@

Set-Content -Path $outputFile -Value $html

Write-Host "HTML file generated at $outputFile"
