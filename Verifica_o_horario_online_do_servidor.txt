# Configura a política de execução para permitir a execução de scripts
Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force

# Caminho do arquivo contendo a lista de servidores
$serversFilePath = "C:\temp\servers.txt"

# Função para obter o tempo de atividade do sistema remoto
function Get-RemoteSystemUptime {
    param (
        [string]$server
    )

    try {
        # Executa o comando remotamente usando Invoke-Command
        $bootTime = Invoke-Command -ComputerName $server -ScriptBlock {
            # Verifica se o comando retornou um valor válido
            $os = Get-CimInstance -ClassName win32_operatingsystem
            if ($os -ne $null) {
                return $os.LastBootUpTime
            } else {
                throw "Failed to get operating system instance."
            }
        }

        # Verifica se $bootTime é um valor de data e hora válido
        if ($bootTime -is [DateTime]) {
            # Calcula o tempo de atividade
            $uptime = (Get-Date) - $bootTime

            # Exibe o tempo de atividade formatado em verde
            $uptimeMessage = "System Uptime for $server: $($uptime.Days) days, $($uptime.Hours) hours, $($uptime.Minutes) minutes"
            Write-Host $uptimeMessage -ForegroundColor Green
        } else {
            Write-Host ("Failed to retrieve a valid LastBootUpTime from {0}" -f $server) -ForegroundColor Red
        }
    } catch {
        Write-Host ("Failed to retrieve uptime for {0}. Error: {1}" -f $server, $_.Exception.Message) -ForegroundColor Red
    }
}

# Verifica se o arquivo de servidores existe
if (Test-Path $serversFilePath) {
    # Lê a lista de servidores do arquivo
    $servers = Get-Content -Path $serversFilePath

    # Loop através da lista de servidores
    foreach ($server in $servers) {
        Get-RemoteSystemUptime -server $server.Trim()  # Remove espaços em branco ao redor do nome do servidor
    }
} else {
    Write-Host "Servers file not found: $serversFilePath" -ForegroundColor Red
}
