# ================= Parâmetros =================
$TargetServer     = 'LABWKS02'  # servidor onde ocorrem os logons
$Hours            = 1           # janela de tempo
$IncludeFailures  = $true       # True = inclui 4625 (falhas) • False = só 4624 (sucessos)

# ================= Preparação =================
$since = (Get-Date).AddHours(-$Hours)

# Mapa de LogonType para leitura
$LogonTypeNames = @{
  '2'  = 'Interactive (console)'
  '3'  = 'Network (SMB/WinRM/etc.)'
  '4'  = 'Batch'
  '5'  = 'Service'
  '7'  = 'Unlock'
  '8'  = 'NetworkCleartext'
  '9'  = 'NewCredentials (runas)'
  '10' = 'RemoteInteractive (RDP/TS)'
  '11' = 'CachedInteractive'
}

# Tradução de códigos de falha (4625)
$LogonFailMap = @{
  '0xC000006A'  = 'Senha incorreta'
  '0xC0000064'  = 'Usuário inexistente'
  '0xC0000234'  = 'Conta bloqueada'
  '0xC0000070'  = 'Fora do horário permitido'
  '0xC0000072'  = 'Conta desabilitada'
  '0xC0000193'  = 'Conta expirada'
  '0xC0000224'  = 'Precisa alterar a senha'
  '0xC0000133'  = 'Skew de tempo (clock)'
}

function Get-EventDataValue {
  param($EventRecord, $Name)
  try {
    $xml = [xml]$EventRecord.ToXml()
    return ($xml.Event.EventData.Data | Where-Object { $_.Name -eq $Name }).'#text'
  } catch { return $null }
}

# ================= Coleta no servidor-alvo =================
# IDs: sempre 4624; 4625 só se $IncludeFailures = $true
$ids = @(4624) + ($(if($IncludeFailures){@(4625)}else{@()}))

$events = Get-WinEvent -ComputerName $TargetServer -FilterHashtable @{
  LogName   = 'Security'
  Id        = $ids
  StartTime = $since
} -ErrorAction Stop

# ================= Filtragem e modelagem =================
$rows = foreach ($e in $events) {
  $eventId = $e.Id

  # Campos comuns
  $user     = Get-EventDataValue $e 'TargetUserName'
  $domain   = Get-EventDataValue $e 'TargetDomainName'
  $ip       = Get-EventDataValue $e 'IpAddress'
  $wk       = Get-EventDataValue $e 'WorkstationName'
  $lt       = Get-EventDataValue $e 'LogonType'
  $pack     = Get-EventDataValue $e 'AuthenticationPackageName'
  $ltName   = if ($LogonTypeNames.ContainsKey($lt)) { $LogonTypeNames[$lt] } else { "Type $lt" }

  # --- excluir o que não é domínio ---
  # 1) contas de máquina (terminam com $)
  if ($user -match '\$$') { continue }
  # 2) contas internas do SO
  if ($user -in @('SYSTEM','LOCAL SERVICE','NETWORK SERVICE')) { continue }
  if ($user -like 'DWM-*' -or $user -like 'UMFD-*') { continue }
  # 3) domínios não-domínio (NT AUTHORITY traduz / conta local do próprio host)
  if ($domain -match '^(?i)(NT AUTHORITY|AUTORIDADE NT)$') { continue }
  if ($domain -and ($domain -ieq $TargetServer)) { continue }

  # Conta normalizada
  $acct = if ($domain) { "$domain\$user" } else { $user }

  # Outcome
  $outcome = switch ($eventId) {
    4624 { 'Sucesso' }
    4625 {
      $status   = Get-EventDataValue $e 'Status'
      $sub      = Get-EventDataValue $e 'SubStatus'
      $reason   = $LogonFailMap[$sub]; if (-not $reason) { $reason = $LogonFailMap[$status] }
      if (-not $reason) { $reason = "Falha (Status=$status SubStatus=$sub)" }
      $reason
    }
  }

  [pscustomobject]@{
    TimeCreated = $e.TimeCreated
    EventID     = $eventId
    Outcome     = $outcome
    Account     = $acct
    LogonType   = $ltName
    IpAddress   = $ip
    Workstation = $wk
    AuthPackage = $pack
  }
}

# ================= Saída =================
$rows |
  Sort-Object TimeCreated -Descending |
  Format-Table -AutoSize
